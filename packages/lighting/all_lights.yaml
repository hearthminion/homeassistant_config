---
# ==================================================================================================
#
# Settings, automations, etc that are common to all lights in all rooms.
#
# ==================================================================================================
adaptive_lighting:
  - name: "Global: Dummy Light"
    initial_transition: 1
    min_color_temp: 2000
    max_color_temp: 6500
    #sunrise_time:
    #sunset_time:

# ==================================================================================================
#
# Automations
#
# ==================================================================================================
automation:
  # ================================================================================================
  #
  #
  #
  # ================================================================================================
  - id: "a3ed2024-e1a9-4ac8-8dca-80cc62812fcf"
    alias: "Global: All Lights - Adaptive Lighting (Toggle)"
    description: ''
    initial_state: false
    trigger:
      - platform: state
        entity_id: binary_sensor.circadian_mode
    condition:
      - condition: template
        value_template: "{{ trigger.to_state != trigger.from_state }}"
    variables:
      circadian_mode: "{{ is_state('binary_sensor.circadian_mode','on') }}"
    action:
      - service: "switch.turn_{{ circadian_mode }}"
        data:
          entity_id:
            - switch.bf1_den_cf1_adaptive_lighting
            - switch.bf1_den_cf2_adaptive_lighting
            - switch.bf1_den_lamp1_adaptive_lighting
            - switch.bf1_den_lamp2_adaptive_lighting
            - switch.bf1_den_lamp3_adaptive_lighting
            - switch.bf1_hallway_adaptive_lighting
            - switch.bf1_kitchen_adaptive_lighting
            - switch.bf1_stairwell_adaptive_lighting
            - switch.bf1_storage1_adaptive_lighting
            - switch.bf1_storage2_adaptive_lighting
            - switch.mf1_bathroom1_inner_adaptive_lighting
            - switch.mf1_bedroom1_cf1_adaptive_lighting
            - switch.mf1_bedroom1_lamp1_adaptive_lighting
            - switch.mf1_bedroom1_lamp2_adaptive_lighting
            - switch.mf2_den_lamp1_adaptive_lighting
            - switch.mf2_den_lamp2_adaptive_lighting

  # ================================================================================================
  #
  #
  #
  # This automation is to ensure that the adaptive lighting switch for the global dummy light is
  # NEVER turned off.  This 'light' is used for sensor purposes only, and all other automations
  # will break if it is ever turned off.
  #
  # ================================================================================================
  - id: "7e6a8e75-fa0a-43f9-8d47-98295ccafc07"
    alias: "Global: Dummy Light - Adaptive Lighting (Turn On)"
    description: ""
    #initial_state: false
    trigger:
      - platform: state
        entity_id: switch.global_dummy_light_adaptive_lighting
        from: "on"
        to: "off"
      - platform: state
        entity_id: switch.global_dummy_light_adaptive_lighting_brightness
        from: "on"
        to: "off"
      - platform: state
        entity_id: switch.global_dummy_light_adaptive_lighting_color
        from: "on"
        to: "off"
    condition: []
    action:
      - service: "switch.turn_on"
        data:
          entity_id:
            - switch.global_dummy_light_adaptive_lighting
            - switch.global_dummy_light_adaptive_lighting_brightness
            - switch.global_dummy_light_adaptive_lighting_color

  # ================================================================================================
  #
  # Set Lighting Mode: Circadian
  #
  # Trigger:
  # - In the morning when the sun rises to 18 degrees below the horizon
  #   enable
  #
  # Actions:
  #
  # ================================================================================================
  - id: "087bce7b-c92f-4c05-a3ba-22949cb79e61"
    alias: "Set Light Mode: Circadian"
    description: ""
    initial_state: false
    trigger:
      - platform: numeric_state
        entity_id: sun.sun
        value_template: "{{ state_attr('sun.sun', 'elevation') }}"
        above: -18
    condition: []
    action:
      - service: input_select.select_option
        data_template:
          entity_id: input_select.light_mode
          option: "Circadian"

  # ================================================================================================
  #
  # Set Lighting Mode: Darken House
  #
  # Trigger:
  # - When the timer that begins the nighttime routine finishes
  #
  # Actions:
  #
  # ================================================================================================
  - id: "ed400d67-ffec-489a-9d90-1a589baa6910"
    alias: "Set Light Mode: Darken House"
    description: ""
    initial_state: false
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.lights_off
    condition: []
    action:
      - service: input_select.select_option
        data_template:
          entity_id: input_select.light_mode
          option: "Darken House"

  # ================================================================================================
  #
  # Set Lighting Mode: Migraine
  #
  # Trigger:
  # - Input Boolean: Special Migraine Mode is set to true
  #
  # Actions:
  # -
  # ================================================================================================
  - id: "1b4dd01f-acb1-4462-b14a-7d818f12787b"
    alias: "Set Light Mode: Migraine"
    description: ""
    initial_state: false
    trigger:
      - platform: state
        entity_id: input_boolean.special_migraine_mode
        to: "on"
    action:
      - service: input_select.select_option
        data_template:
          entity_id: input_select.light_mode
          option: "Migraine"

  # ================================================================================================
  #
  # Set Lighting Mode: Guests
  #
  # Trigger:
  # - Input Boolean: Special Guest Mode is set to true
  #
  # Actions:
  # -
  #
  # ================================================================================================
  - id: "049e19ec-4370-427d-a080-8fece7a2ca6d"
    alias: "Set Light Mode: Guests"
    description: ""
    initial_state: false
    trigger:
      - platform: state
        entity_id: input_boolean.special_guest_present
        from: "off"
        to: "on"
    condition: []
    action:
      data:
        entity_id: input_select.light_mode
        option: "Guests"
      service: input_select.select_option

  # ================================================================================================
  #
  # Update HomeAssistant Scene on Hue Bridge
  #
  # Runs every 10 minutes on the '5s' so 5, 15, 25, 35, etc... while light mode is "circadian"
  #
  # There may be a better a better way of doing this.
  #
  # ================================================================================================
  - id: "b9267e40-af1c-4f92-bb98-e6839787cc97"
    alias: "Update HomeAssistant Scene on Hue Bridges"
    description: ""
    trigger:
      - platform: time_pattern
        minutes: "/10"
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ is_state('input_select.light_mode', 'Circadian') }}"
    action:
      - delay:
          minutes: 5
      - service: script.turn_on
        data: {}
        target:
          entity_id: script.light_update_scene_homeassistant
    mode: single

  - id: "850b046e-09e0-48ff-8139-1969d9672dcd"
    alias: "Update Bulb States"
    description: ""
    initial_state: false
    trigger:
      - platform: time_pattern
        minutes: "/10"
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ is_state('input_select.light_mode', 'Circadian') }}"
    action:
      - service: script.turn_on
        data: {}
        target:
          entity_id: script.hue_update_bulbs
    mode: single

  # - id: "ac5fbf47-d0d4-4ae1-9858-1522f3d96fa3"
  #   alias: "Update Migraine Scene on Hue Bridges"
  #   description: ""
  #   initial_state: false
  #   trigger:
  #     - platform: time
  #       at: "23:00:00"
  #   condition: []
  #   action:
  #     - service: script.turn_on
  #       data: {}
  #       target:
  #         entity_id: script.light_update_scene_migraine
  #   mode: single

  # ================================================================================================
  #
  # Starts a 30 minute timer when all lights are turned off
  #
  # ================================================================================================
  - id: "918ded3c-579d-4b16-8511-f89d881b0103"
    alias: "Start Sleep Timer"
    description: "Starts a timer upon going to bed."
    trigger:
      - platform: time
        at: "21:00:00"
      - platform: state
        entity_id: light.all_lights
        to: "off"
      - platform: state
        entity_id: light.mf1_bedroom1_lamp1
        from: "on"
        to: "off"
      - platform: state
        entity_id: light.mf1_bedroom1_lamp2
        from: "on"
        to: "off"
    condition:
      - condition: time
        after: "21:00:00"
      - condition: state
        entity_id: light.mf1_bedroom1_lamp1
        state: "off"
      - condition: state
        entity_id: light.mf1_bedroom1_lamp2
        state: "off"
    action:
      - service: timer.start
        data:
          entity_id: timer.lights_off

  - id: "17a6fc2f-4a58-4a12-ba58-1b332d4712db"
    alias: "Reboot Hue Bridges"
    description: "Reboots hue bridges overnight."
    trigger:
      - platform: time
        at: "04:00:00"
    condition: []
    action:
      - service: script.turn_on
        data: {}
        target:
          entity_id: script.reboot_hue_bridge
    mode: single

# ==================================================================================================
#
# Input Number
#
# ==================================================================================================
input_number:
  hue_dynamic_scene_speed:
    name: Hue scene speed
    min: 0
    max: 100
    step: 10

  hue_dynamic_scene_brightness:
    name: Hue scene brightness
    min: 0
    max: 255
    step: 10

  hue_update_scene_wait:
    min: 1
    max: 10
    step: 1

# ==================================================================================================
#
# Input select
#
# ==================================================================================================
input_select:
  light_mode:
    name: "Light Mode"
    options:
      - "Circadian"
      - "Darken House"
      - "Migraine"
      - "Sleeping (Migraine)"
      - "Night Out"
      - "Guests"
      - "Other"

  hue_group:
    name: "All: Select Hue Group"
    options:
      - "BF1: All"

  hue_basic_scene:
    name: "All: Hue Basic Scene"
    options:
      - Bright

  hue_dynamic_scene:
    name: "All: Hue Dynamic Scene"
    options:
      - Bright

# ==================================================================================================
#
# Input Text
#
# These input_text entities store the id of the hue hub.  This is expected to be either a fully
# qualified domain name ('hue.example.com') or ip address ('192.168.23.92').
#
# ==================================================================================================
input_text:
  hue_hub01_id:
    name: "MF1: Hue Hub Id"
  hue_hub02_id:
    name: "BF1: Hue Hub Id"
  hue_hub03_id:
    name: "MF2: Hue Hub Id"

# ==================================================================================================
#
# Light Groups
#
# ==================================================================================================
light:
  - platform: group
    unique_id: "5c122025-674c-4e1e-ac01-a6a0e73f24e6"
    name: "All lights"
    entities:
      - light.bf_all
      - light.mf_all

# ==================================================================================================
#
# Scenes
#
# ==================================================================================================
scene:
  - id: "f0bb567c-050e-4499-b46e-99697efa5de7"
    name: "Global: All - Bright"
    entities:
      light.all_lights:
        state: "on"
        color_temp: 367
        brightness: 255

  - id: "8a92e9aa-49e5-4bbd-a4ea-dba3bbc2563d"
    name: "Global: All - Concentrate"
    entities:
      light.all_lights:
        state: "on"
        color_temp: 230
        brightness: 255

  - id: "64e2926b-5a5d-4589-92aa-4d753ed2c685"
    name: "Global: All - Dimmed"
    entities:
      light.all_lights:
        state: "on"
        color_temp: 369
        brightness: 76

  - id: "84c9f8e2-a645-483b-9d63-e16d200546a8"
    name: "Global: All - Energize"
    entities:
      light.all_lights:
        state: "on"
        color_temp: 156
        brightness: 255

  - id: "f7fd82cd-02f2-4c17-b5c5-be6611659130"
    name: "Global: All - Nightlight"
    entities:
      light.all_lights:
        state: "on"
        color_temp: 454
        brightness: 1

  - id: "32aed744-19d7-4260-a1dc-bb172493f0e9"
    name: "Global: All - Read"
    entities:
      light.all_lights:
        state: "on"
        color_temp: 343
        brightness: 255

  - id: "295a2eed-8920-4163-8759-12b0637e9697"
    name: "Global: All - Relax"
    entities:
      light.all_lights:
        state: "on"
        color_temp: 447
        brightness: 145

  - id: "2a718d75-7592-445e-9693-88bebf0f40c3"
    name: "Global: All - Off"
    entities:
      light.all_lights:
        state: "off"

# ==================================================================================================
#
# Scenes
#
# ==================================================================================================
#scene:

# ==================================================================================================
#
# Scripts
#
# The scenes are in the order of:
# - All Light Zone per hub
# - Rooms
#   - Bathroom1
#   - Bathroom2
#   - Bedroom1
#   - Bedroom2
#   - Bedroom3
#   - Den
#   - Dining Room
#   - Entry Way
#   - Great Room
#   - Hallway
#   - Kitchen
#   - Living Room
#   - Stairwell
#   - Storage1
#   - Storage2
# - Zones
#
#
# ==================================================================================================
script:
  hue_update_bulbs:
    alias: "Update Lights colors during off states"
    mode: single
    sequence:

      # ============================================================================================
      #
      #
      #
      # ============================================================================================
      - if:
          - condition: state
            entity_id: light.mf1_bedroom1_cf1_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
              light_id: "{{ states('input_text.mf1_bedroom1_cf1_bulb1') }}"
              username: !secret hue1_username
              color: '"color_temperature":{ "mirek": 367 }'
              #color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.bf1_den_cf1_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
              light_id: "{{ states('input_text.bf1_den_cf1_bulb1') }}"
              username: !secret hue2_username
              color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.mf2_den_lamp1_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
              light_id: "{{ states('input_text.mf2_den_lamp1_bulb1') }}"
              username: !secret hue3_username
              color: '"color_temperature":{ "mirek": 367 }'
              #color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      # ============================================================================================
      #
      #
      #
      # ============================================================================================
      - if:
          - condition: state
            entity_id: light.mf1_bedroom1_lamp1_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
              light_id: "{{ states('input_text.mf1_bedroom1_lamp1_bulb1') }}"
              username: !secret hue1_username
              color: '"color_temperature":{ "mirek": 367 }'
              #color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.bf1_den_cf2_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
              light_id: "{{ states('input_text.bf1_den_cf2_bulb1') }}"
              username: !secret hue2_username
              color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.mf2_den_lamp2_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
              light_id: "{{ states('input_text.mf2_den_lamp2_bulb1') }}"
              username: !secret hue3_username
              color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      # ============================================================================================
      #
      #
      #
      # ============================================================================================
      - if:
          - condition: state
            entity_id: light.mf1_bedroom1_lamp1_bulb2
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
              light_id: "{{ states('input_text.mf1_bedroom1_lamp1_bulb2') }}"
              username: !secret hue1_username
              color: '"color_temperature":{ "mirek": 367 }'
              #color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.bf1_den_lamp1_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
              light_id: "{{ states('input_text.bf1_den_lamp1_bulb1') }}"
              username: !secret hue2_username
              color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.mf2_den_lamp3_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
              light_id: "{{ states('input_text.mf2_den_lamp3_bulb1') }}"
              username: !secret hue3_username
              color: '"color_temperature":{ "mirek": 367 }'
              #color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      # ============================================================================================
      #
      #
      #
      # ============================================================================================
      - if:
          - condition: state
            entity_id: light.mf1_bedroom1_lamp2_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
              light_id: "{{ states('input_text.mf1_bedroom1_lamp2_bulb1') }}"
              username: !secret hue1_username
              color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.bf1_den_lamp2_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
              light_id: "{{ states('input_text.bf1_den_lamp2_bulb1') }}"
              username: !secret hue2_username
              color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.mf2_den_lamp5_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
              light_id: "{{ states('input_text.mf2_den_lamp5_bulb1') }}"
              username: !secret hue3_username
              color: '"color_temperature":{ "mirek": 367 }'
              #color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      # ============================================================================================
      #
      #
      #
      # ============================================================================================
      - if:
          - condition: state
            entity_id: light.mf1_bedroom1_lamp2_bulb2
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
              light_id: "{{ states('input_text.mf1_bedroom1_lamp2_bulb2') }}"
              username: !secret hue1_username
              color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.bf1_den_lamp3_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
              light_id: "{{ states('input_text.bf1_den_lamp3_bulb1') }}"
              username: !secret hue2_username
              color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      # ============================================================================================
      #
      #
      #
      # ============================================================================================
      - if:
          - condition: state
            entity_id: light.mf1_bathroom1_inner_cf1_bulb1
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
              light_id: "{{ states('input_text.mf1_bathroom1_inner_cf1_bulb1') }}"
              username: !secret hue1_username
              color: '"color_temperature":{ "mirek": 367 }'
              #color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - if:
          - condition: state
            entity_id: light.bf1_den_lamp3_bulb2
            state: "off"
        then:
          - service: rest_command.hue_update_bulb
            data:
              hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
              light_id: "{{ states('input_text.bf1_den_lamp3_bulb2') }}"
              username: !secret hue2_username
              color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'

      - delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

  light_update_scene_homeassistant:
    alias: "Update Home Assistant Scenes"
    mode: single
    sequence:

      # ============================================================================================
      #
      # Whole Hub Scenes
      #
      # ============================================================================================
      - service: rest_command.light_update_scene_15_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
          scene_id: "{{ states('input_text.mf1_all_scene_homeassistant') }}"
          username: !secret hue1_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf1_bathroom1_inner_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.mf1_bathroom1_inner_cf1_bulb2') }}"
          bulb03_id: "{{ states('input_text.mf1_bathroom1_inner_cf1_bulb3') }}"
          bulb04_id: "{{ states('input_text.mf1_bathroom2_cf1_bulb1') }}"
          bulb05_id: "{{ states('input_text.mf1_bathroom2_cf1_bulb2') }}"
          bulb06_id: "{{ states('input_text.mf1_bathroom2_cf1_bulb3') }}"
          bulb07_id: "{{ states('input_text.mf1_bedroom1_cf1_bulb1') }}"
          bulb08_id: "{{ states('input_text.mf1_bedroom1_lamp1_bulb1') }}"
          bulb09_id: "{{ states('input_text.mf1_bedroom1_lamp1_bulb2') }}"
          bulb10_id: "{{ states('input_text.mf1_bedroom1_lamp2_bulb1') }}"
          bulb11_id: "{{ states('input_text.mf1_bedroom1_lamp2_bulb2') }}"
          bulb12_id: "{{ states('input_text.mf1_hallway_cf1_bulb1') }}"
          bulb13_id: "{{ states('input_text.mf1_hallway_cf1_bulb2') }}"
          bulb14_id: "{{ states('input_text.mf1_hallway_cf2_bulb1') }}"
          bulb15_id: "{{ states('input_text.mf1_hallway_cf2_bulb2') }}"

      - service: rest_command.light_update_scene_17_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_all_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_den_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.bf1_den_cf2_bulb1') }}"
          bulb03_id: "{{ states('input_text.bf1_den_lamp1_bulb1') }}"
          bulb04_id: "{{ states('input_text.bf1_den_lamp2_bulb1') }}"
          bulb05_id: "{{ states('input_text.bf1_den_lamp3_bulb1') }}"
          bulb06_id: "{{ states('input_text.bf1_den_lamp3_bulb2') }}"
          bulb07_id: "{{ states('input_text.bf1_hallway_cf1_bulb1') }}"
          bulb08_id: "{{ states('input_text.bf1_hallway_cf1_bulb2') }}"
          bulb09_id: "{{ states('input_text.bf1_hallway_cf1_bulb3') }}"
          bulb10_id: "{{ states('input_text.bf1_kitchen_cf1_bulb1') }}"
          bulb11_id: "{{ states('input_text.bf1_stairwell_cf1_bulb1') }}"
          bulb12_id: "{{ states('input_text.bf1_storage1_cf1_bulb1') }}"
          bulb13_id: "{{ states('input_text.bf1_storage1_cf2_bulb1') }}"
          bulb14_id: "{{ states('input_text.bf1_storage2_lamp1_bulb1') }}"
          bulb15_id: "{{ states('input_text.bf1_storage2_lamp2_bulb1') }}"
          bulb16_id: "{{ states('input_text.bf1_storage2_lamp3_bulb1') }}"
          bulb17_id: "{{ states('input_text.bf1_storage2_lamp4_bulb1') }}"

      # - service: rest_command.light_update_scene_04_bulbs
      #   data:
      #     hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
      #     scene_id: "{{ states('input_text.mf2_all_scene_homeassistant') }}"
      #     username: !secret hue3_username
      #     color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
      #     brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
      #     on_state: '"on":{"on":true}'
      #     bulb01_id: "{{ states('input_text.mf2_den_lamp1_bulb1') }}"
      #     bulb02_id: "{{ states('input_text.mf2_den_lamp2_bulb1') }}"
      #     bulb03_id: "{{ states('input_text.mf2_den_lamp3_bulb1') }}"
      #     bulb04_id: "{{ states('input_text.mf2_den_lamp5_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      # ============================================================================================
      #
      # Room Scenes
      #
      # ============================================================================================
      - service: rest_command.light_update_scene_03_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
          scene_id: "{{ states('input_text.mf1_bathroom1_inner_scene_homeassistant') }}"
          username: !secret hue1_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf1_bathroom1_inner_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.mf1_bathroom1_inner_cf1_bulb2') }}"
          bulb03_id: "{{ states('input_text.mf1_bathroom1_inner_cf1_bulb3') }}"

      - service: rest_command.light_update_scene_06_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_den_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_den_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.bf1_den_cf2_bulb1') }}"
          bulb03_id: "{{ states('input_text.bf1_den_lamp1_bulb1') }}"
          bulb04_id: "{{ states('input_text.bf1_den_lamp2_bulb1') }}"
          bulb05_id: "{{ states('input_text.bf1_den_lamp3_bulb1') }}"
          bulb06_id: "{{ states('input_text.bf1_den_lamp3_bulb2') }}"

      - service: rest_command.light_update_scene_04_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
          scene_id: "{{ states('input_text.mf2_great_room_scene_homeassistant') }}"
          username: !secret hue3_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf2_den_lamp1_bulb1') }}"
          bulb02_id: "{{ states('input_text.mf2_den_lamp2_bulb1') }}"
          bulb03_id: "{{ states('input_text.mf2_den_lamp3_bulb1') }}"
          bulb04_id: "{{ states('input_text.mf2_den_lamp5_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_03_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
          scene_id: "{{ states('input_text.mf1_bathroom2_scene_homeassistant') }}"
          username: !secret hue1_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf1_bathroom2_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.mf1_bathroom2_cf1_bulb2') }}"
          bulb03_id: "{{ states('input_text.mf1_bathroom2_cf1_bulb3') }}"

      - service: rest_command.light_update_scene_03_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_hallway_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_hallway_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.bf1_hallway_cf1_bulb2') }}"
          bulb03_id: "{{ states('input_text.bf1_hallway_cf1_bulb3') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_05_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
          scene_id: "{{ states('input_text.mf1_bedroom1_scene_homeassistant') }}"
          username: !secret hue1_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf1_bedroom1_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.mf1_bedroom1_lamp1_bulb1') }}"
          bulb03_id: "{{ states('input_text.mf1_bedroom1_lamp1_bulb2') }}"
          bulb04_id: "{{ states('input_text.mf1_bedroom1_lamp2_bulb1') }}"
          bulb05_id: "{{ states('input_text.mf1_bedroom1_lamp2_bulb2') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_kitchen_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_kitchen_cf1_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_04_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
          scene_id: "{{ states('input_text.mf1_hallway_scene_homeassistant') }}"
          username: !secret hue1_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf1_hallway_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.mf1_hallway_cf1_bulb2') }}"
          bulb03_id: "{{ states('input_text.mf1_hallway_cf2_bulb1') }}"
          bulb04_id: "{{ states('input_text.mf1_hallway_cf2_bulb2') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_stairwell_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_stairwell_cf1_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_02_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_storage1_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_storage1_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.bf1_storage1_cf2_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_04_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_storage2_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_storage2_lamp1_bulb1') }}"
          bulb02_id: "{{ states('input_text.bf1_storage2_lamp2_bulb1') }}"
          bulb03_id: "{{ states('input_text.bf1_storage2_lamp3_bulb1') }}"
          bulb04_id: "{{ states('input_text.bf1_storage2_lamp4_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      # ============================================================================================
      #
      # Zone Scenes
      #
      # ============================================================================================
      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
          scene_id: "{{ states('input_text.mf1_bedroom1_cf1_scene_homeassistant') }}"
          username: !secret hue1_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf1_bedroom1_cf1_bulb1') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_den_cf1_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_den_cf1_bulb1') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
          scene_id: "{{ states('input_text.mf2_den_lamp1_scene_homeassistant') }}"
          username: !secret hue3_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf2_den_lamp1_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_02_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
          scene_id: "{{ states('input_text.mf1_bedroom1_lamp1_scene_homeassistant') }}"
          username: !secret hue1_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf1_bedroom1_lamp1_bulb1') }}"
          bulb02_id: "{{ states('input_text.mf1_bedroom1_lamp1_bulb2') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_den_cf2_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_den_cf2_bulb1') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
          scene_id: "{{ states('input_text.mf2_den_lamp2_scene_homeassistant') }}"
          username: !secret hue3_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf2_den_lamp2_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_02_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
          scene_id: "{{ states('input_text.mf1_bedroom1_lamp2_scene_homeassistant') }}"
          username: !secret hue1_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf1_bedroom1_lamp2_bulb1') }}"
          bulb02_id: "{{ states('input_text.mf1_bedroom1_lamp2_bulb2') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_den_lamp1_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_den_lamp1_bulb1') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
          scene_id: "{{ states('input_text.mf2_den_lamp3_scene_homeassistant') }}"
          username: !secret hue3_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf2_den_lamp3_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_04_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub01_id') }}"
          scene_id: "{{ states('input_text.mf1_hallway_cf_scene_homeassistant') }}"
          username: !secret hue1_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf1_hallway_cf1_bulb1') }}"
          bulb02_id: "{{ states('input_text.mf1_hallway_cf1_bulb2') }}"
          bulb03_id: "{{ states('input_text.mf1_hallway_cf2_bulb1') }}"
          bulb04_id: "{{ states('input_text.mf1_hallway_cf2_bulb2') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_den_lamp1_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_den_lamp1_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_den_lamp2_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_den_lamp2_bulb1') }}"

      - service: rest_command.light_update_scene_01_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub03_id') }}"
          scene_id: "{{ states('input_text.mf2_den_lamp5_scene_homeassistant') }}"
          username: !secret hue3_username
          color: '"color_temperature":{ "mirek":{{ states("sensor.global_dummy_light_color_temperature") | int(367) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.mf2_den_lamp5_bulb1') }}"

      # We now add a delay to not overwhelm the bridge
      - alias: "Wait"
        delay: "{{ states('input_number.hue_update_scene_wait') | int(1) }}"

      - service: rest_command.light_update_scene_02_bulbs
        data:
          hue_hub_id: "{{ states('input_text.hue_hub02_id') }}"
          scene_id: "{{ states('input_text.bf1_den_lamp3_scene_homeassistant') }}"
          username: !secret hue2_username
          color: '"color_temperature":{ "mirek":{{ min(states("sensor.global_dummy_light_color_temperature") | int(367), 454) }} }'
          brightness: '"dimming":{ "brightness": {{ states("sensor.global_dummy_light_brightness") | int(100) }} }'
          on_state: '"on":{"on":true}'
          bulb01_id: "{{ states('input_text.bf1_den_lamp3_bulb1') }}"
          bulb02_id: "{{ states('input_text.bf1_den_lamp3_bulb2') }}"

  # ================================================================================================
  #
  # This next script is not run often.  Since the migraine automations are based on detecting if the
  # color of the light has been set to xy: [0.17, 0.7], then we need to ensure if the scene has been
  # modified in the hue app (or some other external app) when adding a light, etc that the values
  # are properly set.
  #
  # ================================================================================================
  # light_update_scene_migraine:
  #   alias: "Update Migraine Scenes"
  #   sequence:

  # ================================================================================================
  #
  # Flash Lights
  #
  # ================================================================================================
  flash_lights:
    alias: Flash lights
    sequence:
      - service: light.turn_on
        data_template:
          entity_id: "light.{{ light }}"
      - repeat:
          count: 60
          sequence:
            - delay: 2.5
            - service: light.toggle
              data_template:
                entity_id: "light.{{ light }}"
    mode: restart

  # ================================================================================================
  #
  # The next two scripts save the current light state before activating a hue scene, and
  # upon deactivation restore the previous state.
  #
  # ================================================================================================
  activate_hue_dynamic_scene:
    alias: "All: Activate Hue dynamic scene"
    mode: restart
    icon: mdi:power
    sequence:
      - condition: >
          {{is_state('binary_sensor.light_all_selected_hue_group_active_scene','off')}}
      # first record current state of lights in the selected group
      - service: scene.create
        data:
          scene_id: before_dynamic_scene
          snapshot_entities:
            - >
              {% set select = states('input_select.hue_group')|slugify %}
              {% set group ='light.' + select %}
              {{group}}
      - service: hue.activate_scene
        data:
          dynamic: true
          speed: >
            {{states('input_number.hue_dynamic_scene_speed')|int}}
          brightness: >
            {{states('input_number.hue_dynamic_scene_brightness')|int}}
        target:
          entity_id: >
            {% set select = states('input_select.hue_dynamic_scene')|slugify %}
            {{'scene.' + select}}

  deactivate_hue_dynamic_scene:
    alias: "All: Deactivate Hue dynamic scene"
    mode: restart
    icon: mdi:power-off
    sequence:
      - condition: >
          {{is_state('binary_sensor.light_all_selected_hue_group_active_scene','on')}}
      - service: hue.activate_scene
        data:
          dynamic: false
        target:
          entity_id: >
            {% set select = states('input_select.hue_dynamic_scene')|slugify %}
            {{'scene.' + select}}
      # reset the lights to the state before the dynamic scene activation
      - service: scene.turn_on
        target:
          entity_id: scene.before_dynamic_scene

  reboot_hue_bridge:
    alias: "Reboot Hue Bridges"
    mode: single
    sequence:
      - service: rest_command.hue_config
        data:
          url1: !secret hue1_api_url
          url2: "/config"
          config: '"reboot":true'
      - service: rest_command.hue_config
        data:
          url1: !secret hue2_api_url
          url2: "/config"
          config: '"reboot":true'

# ==================================================================================================
#
# Templates
#
# ==================================================================================================
template:
  - binary_sensor:
      - unique_id: "4fd1dd66-c51b-474d-9de7-da4dfd5cc398"
        name: "Circadian Mode"
        state: "{{ is_state('input_select.light_mode', 'Circadian') }}"

      - unique_id: "1fb06868-f4c9-4d0b-be18-7299a9f1fd25"
        name: "All: Selected Hue group active scene"
        state: >
          {% set select = states('input_select.hue_group')|slugify %}
          {% set group ='light.' + select %}
          {{is_state_attr(group,'dynamics',true)}}

      - unique_id: "9b9548fe-448e-40ea-bf3d-360bc1f1b36f"
        name: "All: Selected Hue group has active scenes available"
        state: >
          {% set hue_group = states('input_select.hue_group') %}
          {{states.scene
          |selectattr('attributes.group_name','eq',hue_group)
          |selectattr('attributes.is_dynamic','eq',true)|list|length != 0}}

      - unique_id: "61549b92-7137-44bd-adab-3834eb1c634f"
        name: "All: Hue groups dynamic scening"
        state: >
          {{states.light|selectattr('attributes.dynamics','eq',true)|list|length != 0}}


  - sensor:
      - unique_id: "0639ee4e-55ff-41af-a903-ff6db2660b1e"
        name: "Global Dummy Light Brightness"
        state: >-
          {% if state_attr("switch.global_dummy_light_adaptive_lighting", "brightness_pct") is number %}
            {{ state_attr("switch.global_dummy_light_adaptive_lighting", "brightness_pct") | int(100) }}
          {% else %}
            100
          {% endif %}
        unit_of_measurement: "%"

      - unique_id: "0e8a672a-9db0-40bd-9727-d0b206802b80"
        name: "Global Dummy Light Color Temperature"
        state: >-
          {% if is_state("input_select.light_mode", "Migraine") %}
            {{ max(state_attr("switch.global_dummy_light_adaptive_lighting", "color_temp_mired") | int(367), 285) }}
          {% else %}
            {{ state_attr("switch.global_dummy_light_adaptive_lighting", "color_temp_mired") | int(367) }}
          {% endif %}
        state_class: measurement

      - unique_id: "48f9f765-7fa8-4b6c-b18b-9a0ab378f57c"
        name: "Global Dummy Light Color Temperature (Kelvin)"
        state: >-
          {% if is_state("input_select.light_mode", "Migraine") %}
            {{ min(state_attr("switch.global_dummy_light_adaptive_lighting", "color_temp_kelvin") | int(2700), 3500) }}
          {% else %}
            {{ state_attr("switch.global_dummy_light_adaptive_lighting", "color_temp_kelvin") | int(2700) }}
          {% endif %}
        state_class: measurement
        unit_of_measurement: "°K"

      - unique_id: "c595cf2d-875d-4699-9a46-223e3bfeb1e2"
        name: "Global Dummy Light Color Temperature (Mired)"
        state: >-
          {% if state_attr("switch.global_dummy_light_adaptive_lighting", "color_temp_kelvin") is number %}
            {{ (1000000/(state_attr("switch.global_dummy_light_adaptive_lighting", "color_temp_kelvin"))) | round(0, "floor") }}
          {% else %}
            {{ (1000000/367) | round(0, "floor") }}
          {% endif %}
        state_class: measurement

# ==================================================================================================
#
# Timers
#
# ==================================================================================================
timer:
  lights_off:
    name: 'Lights off timer'
    duration: '00:30:00'
